{"name":"Scriber","tagline":"A tiny framework to write easily HTML code in javascript","body":"![Travis CI](https://travis-ci.org/jccazeaux/scriber.svg?branch=master)\r\n\r\n# scriber\r\nA tiny framework to write easily HTML code in javascript\r\n\r\n# Installation\r\n\r\n* Download the [latest release](https://github.com/jccazeaux/scriber/releases/download/v0.1.0/scriber.min.js).\r\n* Clone the repo: `git clone https://github.com/jccazeaux/scriber.git`.\r\n* Install with npm: `npm install scriber-js`.\r\n\r\n\r\n# Syntax\r\n```Javascript\r\nscriber\r\n\t.div()\r\n\t\t.id(\"myId\")\r\n\t\t.class(\"my-css-class\")\r\n\t\t.input()\r\n\t\t\t.value(\"my value\")\r\n\t\t.end()\r\n\t\t.element(\"span\")\r\n\t\t.class(\"red\")\r\n\t\t.end()\r\n\t.end()\r\n\t.toString\r\n\r\n```\r\n\r\nProduces\r\n\r\n```html\r\n<div id=\"myId\" class=\"my-css-class\"><input value=\"my value\"><span style=\"red\"></span></div>\r\n```\r\n\r\n# api\r\n## scriber.&lt;tagName&gt;() or scriber.Element(&lt;tagName&gt;)\r\nCreates the root element. You can use generic \"element\" function with will take the tagName as parameter, or a shortcut function wich name will be the tagName.\r\n\r\nThis function will return an \"Element\" object to work on the new created element\r\n\r\n## Element.&lt;tagName&gt;() or Element.element(&lt;tagName&gt;)\r\nCreates a child element with same rules.\r\n\r\nThis function returns the created element. To close this element, use the end function.\r\n\r\n## Element.end()\r\nEnds the current element. Returns the parent element.\r\n\r\n## Element.<attributeName>(&lt;String&gt; value) or Element.attr(&lt;String&gt; name, &lt;String&gt; value)\r\nCreates an attribute on the element. You can use either a shortcut function or generic element() function\r\n\r\n## Element.text(&lt;String&gt; value)\r\nAdds a text node. No need to end a text node as it does not accept children.\r\n\r\n## Element.toString()\r\nReturn the element as a String\r\n\r\n## Element.toHTMLElement()\r\nReturn the element as HTMLElement object\r\n\r\n# Shortcut methods\r\n## For tags\r\nScriber supports shortcuts for the following tags\r\n```Javascript\r\n[\"a\",\"abbr\",\"acronym\",\"address\",\"applet\",\"area\",\"article\",\"aside\",\"audio\",\"b\",\"base\",\"basefont\",\"bdi\",\"bdo\",\"big\",\"blockquote\",\"body\",\r\n\"br\",\"button\",\"canvas\",\"caption\",\"center\",\"cite\",\"code\",\"col\",\"colgroup\",\"datalist\",\"dd\",\"del\",\"details\",\"dfn\",\"dialog\",\"dir\",\"div\",\r\n\"dl\",\"dt\",\"em\",\"embed\",\"fieldset\",\"figcaption\",\"figure\",\"font\",\"footer\",\"form\",\"frame\",\"frameset\",\"h1\",- \"h6\",\"head\",\"header\",\"hr\",\r\n\"html\",\"i\",\"iframe\",\"img\",\"input\",\"ins\",\"kbd\",\"keygen\",\"label\",\"legend\",\"li\",\"link\",\"main\",\"map\",\"mark\",\"menu\",\"menuitem\",\"meta\",\r\n\"meter\",\"nav\",\"noframes\",\"noscript\",\"object\",\"ol\",\"optgroup\",\"option\",\"output\",\"p\",\"param\",\"pre\",\"progress\",\"q\",\"rp\",\"rt\",\"ruby\",\r\n\"s\",\"samp\",\"script\",\"section\",\"select\",\"small\",\"source\",\"span\",\"strike\",\"strong\",\"style\",\"sub\",\"summary\",\"sup\",\"table\",\"tbody\",\r\n\"td\",\"textarea\",\"tfoot\",\"th\",\"thead\",\"time\",\"title\",\"tr\",\"track\",\"tt\",\"u\",\"ul\",\"var\",\"video\",\"wbr\"]\r\n```\r\n## For attributes\r\nScriber supports shortcuts for the following attributes. The style attribute has no shortcut because the style method already handles the style tag. If you really want to add a style attribute (instead of class), use the generic attr(\"style\") method.\r\n```Javascript\r\n[\"alt\", \"diabled\", \"href\", \"src\", \"title\", \"value\", \"name\", \"id\", \"class\"]\r\n``\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}